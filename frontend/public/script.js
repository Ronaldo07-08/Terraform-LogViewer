const API_BASE_URL = 'http://localhost:8000';

let selectedFile = null;

document.addEventListener('DOMContentLoaded', function() {
    initializeEventListeners();
});

function initializeEventListeners() {
    document.getElementById('fileInput').addEventListener('change', handleFileSelect);

    const uploadArea = document.querySelector('.upload-area');

    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.style.background = '#e9ecef';
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.style.background = '';
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.style.background = '';

        const files = e.dataTransfer.files;
        if (files.length > 0) {
            document.getElementById('fileInput').files = files;
            selectedFile = files[0];
            updateFileInfo();
        }
    });
}

function handleFileSelect(event) {
    selectedFile = event.target.files[0];
    updateFileInfo();
}

function updateFileInfo() {
    const fileInfo = document.getElementById('fileInfo');
    if (selectedFile) {
        fileInfo.innerHTML =
            `<strong>–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:</strong> ${selectedFile.name} (${(selectedFile.size / 1024).toFixed(2)} KB)`;
        document.getElementById('uploadBtn').disabled = false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
async function uploadFile() {
    if (!selectedFile) {
        showResult('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª', 'error');
        return;
    }

    const btn = document.getElementById('uploadBtn');
    const loader = document.getElementById('loader');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä, —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    btn.disabled = true;
    btn.style.display = 'none';
    loader.style.display = 'block';
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    document.getElementById('result').innerHTML = '';

    try {
        // –¢–í–û–ô –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ù–ê –ë–≠–ö–ï–ù–î
        const formData = new FormData();
        formData.append('file', selectedFile);

        const response = await fetch('http://localhost:8000/api/upload', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        showSuccessResult(result);

    } catch (error) {
        showResult(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, 'error');
        console.error('Error:', error);
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, —Å–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
        btn.disabled = false;
        btn.style.display = 'block';
        loader.style.display = 'none';
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showSuccessResult(data) {
    const resultDiv = document.getElementById('result');
    resultDiv.className = 'result success';

    let statsHtml = '';
    if (data.summary) {
        statsHtml = `
            <div class="stats">
                <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h4>
                <ul>
                    <li>–°—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${data.summary.total_lines || 0}</li>
                    <li>–û—à–∏–±–æ–∫: ${data.summary.error_count || 0}</li>
                    <li>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${data.summary.warning_count || 0}</li>
                    <li>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${data.summary.unique_requests || 0}</li>
                    <li>JSON –±–ª–æ–∫–æ–≤: ${data.summary.has_json_blocks ? '–î–∞' : '–ù–µ—Ç'}</li>
                </ul>
            </div>
        `;
    }

    resultDiv.innerHTML = `
        <h3>‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</h3>
        <p><strong>ID:</strong> ${data.log_id}</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${data.message}</p>
        ${statsHtml}
        <button onclick="viewLogDetails('${data.log_id}')" style="margin-top: 10px;">
            üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –ª–æ–≥–∞
        </button>
    `;
}

function showResult(message, type) {
    const resultDiv = document.getElementById('result');
    resultDiv.className = `result ${type}`;
    resultDiv.innerHTML = message;
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function viewLogDetails(logId) {
    try {
        const response = await fetch(`${API_BASE_URL}/api/logs/${logId}`);
        if (!response.ok) throw new Error('Failed to fetch log details');

        const logData = await response.json();
        showLogDetailsModal(logData);
    } catch (error) {
        showResult(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π: ${error.message}`, 'error');
    }
}

function showLogDetailsModal(logData) {
    // –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('–î–µ—Ç–∞–ª–∏ –ª–æ–≥–∞:', logData);
    alert(`–î–µ—Ç–∞–ª–∏ –ª–æ–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞.\n\n–°–µ–∫—Ü–∏–∏: ${JSON.stringify(logData.sections)}\n–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${logData.total_lines}`);
}